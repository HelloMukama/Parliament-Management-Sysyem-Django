"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/


"""


import dj_database_url 
prod_db  =  dj_database_url.config(conn_max_age=500)
# DATABASES['default'].update(prod_db)


import os
# import django_heroku

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


ALLOWED_HOSTS = [
    'https://speakeraide.herokuapp.com/'
    # '127.0.0.1',
    # '*'
]   

# research if more can be added here...
# ALLOWED_HOSTS = ['submissionmgtsys.herokuapp.com']   # research if more can be added here...

# Apps definition
INSTALLED_APPS = [

    # default
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # custom 31.03.2021  in asc
    'about',
    'accounts',
    'base',
    'submissions',
    'index',
    'personalsettings',
    'profiles',
    'stats',
    # 'submissions.apps.SuitConfig',

    # 3rd-party 31.03.2021
    # 'taggit',
    'environ',
    'crispy_forms',
    'allauth',  # new          # added march 31 following docs direction
    'allauth.account',  # new
    # 'allauth.socialaccount',      # in case you want users to login with social accounts
    # 'reportlab',                     # added march 31 following docs direction
    'phonenumber_field',           # added march 31 following docs direction
    'django_extensions',           # added march 31 following docs direction
    'django_filters',
    'bootstrapform',
    'django_tables2',
    'comment',     # this is for the comment framework from "django-comments-dab"
    'rest_framework',
    'widget_tweaks',
    # 'bootstrap_datepicker_plus',   # works with bootstrap4 below
    'bootstrap4',      # works with line above
    # 'django_db_server_side',   # github
    # 'bootstrap_modal_forms'  # fancy js forms pop
    # 'django_postgres_dropdb',

    # 3rd-party SECURITY
    'admin_honeypot',     # FAKE ADMIN FOR BOTS
]


# SITE_ID = 1


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    # third-party
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',


    # custom

]


ROOT_URLCONF = 'mysite.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # custom
            ],
        },
    },
]


WSGI_APPLICATION = 'mysite.wsgi.application'


import environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)


# reading .env file
environ.Env.read_env('mysite/.env')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')  # False if not in os.environ


# Database THIS IS TO BE CHANGED TO POSTGRESQL. For now were using dbsqlite
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }

    'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': 'localhost',
            'PORT': '',
        }
}



DATABASES['default'].update(prod_db)    # this relates with top 3 lines


# CACHES = {
#     # read os.environ['CACHE_URL'] and raises ImproperlyConfigured exception if not found
#     'default': env.cache(),
#
#     # read os.environ['REDIS_URL']
#     'redis': env.cache('REDIS_URL')
# }


# DATABASE_URL = env('DATABASE_URL')


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            # 'min_length': 4,   # 4 characters minimum for passwords
            'min_length': 9,   # this should be in effect in the production phase
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # {
    #     'NAME': 'accounts.validators.AllAlphabeticPasswordValidator',     # #
    # },
]

# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Kampala'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'      # This is handling some Primary key concerns of django 3.2


# The newly customised User model in our 'profiles.models'
AUTH_USER_MODEL = 'profiles.MyUser'


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )



CRISPY_TEMPLATE_PACK = 'bootstrap4'

BOOTSTRAP4 = {
    'include_jquery': True,    # this is gonna help the 'bootstrap_datepicker_plus' app to pick dates in our search-filter form
}

THUMBNAIL_EXTENSION = 'png'     # Or any extn for your thumbnails

# media saving / retrieving location
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'  # this takes us to 'src/media/'    not 'static/media'

# For Bootstrap 4, change error alert to 'danger'
from django.contrib import messages

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}


# Login/Out

LOGIN_REDIRECT_URL = 'stats:dashboard'   # redirect logins to index page
LOGIN_URL = 'accounts:login'   # any login restricted url redirects to a login page
LOGOUT_URL = 'logout/'
LOGOUT_REDIRECT_URL = 'accounts:login'

SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# ----------------------------------------------------------------------------------------------
# # Email config
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'   # printing the email to the terminal
EMAIL_HOST = 'localhost'
EMAIL_PORT = 5432
EMAIL_HOST_USER = ''      # add email address here
EMAIL_HOST_PASSWORD = ''  # email password
DEFAULT_FROM_EMAIL = 'mukama@example.com'   # add email address here
EMAIL_USE_TLS = True
# ----------------------------------------------------------------------------------------------

# EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",

    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

SITE_ID = 3
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True

PHONENUMBER_DB_FORMAT = 'NATIONAL'
PHONENUMBER_DEFAULT_REGION = 'UG'  # we are targeting the +256 digits here

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')   # Raises ImproperlyConfigured exception if SECRET_KEY not in os.environ

# whitenoise here is sth to do with improving on the speed the server takes to load static files
# ref.>> http://whitenoise.evans.io/en/stable/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# STATICFILES_STORAGE =  'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'


# This setting is for the comments app
COMMENT_PER_PAGE = 15  # default is 10
PROFILE_APP_NAME = 'profiles'
PROFILE_MODEL_NAME = 'Profile'  # letter case insensitive


# Since only one person will be able to flag a comment,
# one flagging will be enough for us the admins to review a particular comment
COMMENT_FLAGS_ALLOWED = 2   # if a comment is flagged more than 1 time, it'll be hidden from display. Default value is 0
# COMMENT_SHOW_FLAGGED=True    # this means flagged comments will still be displayed

COMMENT_FLAG_REASONS = [
    (1, 'Spam - Person is promoting their own services'),   # default
    (2, 'Abusive - Intended at promoting hatred'),    # default
    (3, 'Tribalism - Comment is tribalistic'),    # default
    # The system automatically adds a 'Something else' somewhere as the last option
]


""" I disabled Anonymous commenting but it is available in the docs. for non authenticated user commenting 

EMAIL_HOST_USER = 'user@domain'
EMAIL_HOST_PASSWORD = 'password'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'    # this backend won't send emails but will just print them to the console. For production use your own backend.
 """

# # **************************************************************************
# # EMAILS IN PROD e.g for if you are using gmail address, you may set:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USE_TLS = True
# EMAIL_USE_SSL = False
# EMAIL_PORT = 587
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
# # **************************************************************************

COMMENT_USE_GRAVATAR = True   # using gravatar for profile pics
COMMENT_ALLOW_SUBSCRIPTION = True   # 'True' means we'll send emails to each followers of a post following any changes

COMMENT_PROFILE_API_FIELDS = ('user', 'phone_number', 'email')

COMMENT_ALLOW_TRANSLATION = True

COMMENT_DEFAULT_PROFILE_PIC_LOC = '/media/profilepics/default.jpg'


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {'level': 'DEBUG',
#                  'class': 'logging.FileHandler',
#                  'filename': '/tmp/debug.log',
#                  },
#     },
#     'loggers': {'django': {'handlers': ['file'],
#                            'level': 'DEBUG',
#                            'propagate': True,
#                            },
#                 },
# }
# # tail -f /tmp/debug.log


# Extra lookup directories for collectstatic to find static files
# STATICFILES_DIRS = (
#     os.path.join(BASE_DIR, 'static'),
# )


import dj_database_url 
prod_db = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(prod_db)


# # Activate Django-Heroku.
# django_heroku.settings(locals())
